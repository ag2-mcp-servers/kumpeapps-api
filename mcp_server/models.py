# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T04:13:12+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Field


class Field201Share(BaseModel):
    auth_link: Optional[str] = Field(
        None,
        examples=[
            'https://khome.kumpeapps.com/portal/wish-list.php?token=8ou7jyubj878h7iunk'
        ],
    )
    success: Optional[bool] = Field(None, examples=[True])


class Field403(BaseModel):
    error: Optional[str] = Field(None, examples=['Access Denied'])
    success: Optional[bool] = Field(None, examples=[False])


class Field405(BaseModel):
    error: Optional[str] = Field(
        None,
        examples=[
            'API Access Denied! Your API account does not have access to this Verb Method!'
        ],
    )
    success: Optional[int] = Field(None, examples=[0])


class Field412(BaseModel):
    error: Optional[str] = Field(
        None, examples=['API Access Denied! Your API key is invalid or has expired!']
    )
    success: Optional[int] = Field(None, examples=[0])


class Field449(BaseModel):
    message: Optional[str] = Field(
        None,
        examples=['OTP Required is configured for this User. Retry login with OTP'],
    )
    success: Optional[bool] = Field(None, examples=[False])


class AddUserResponse(BaseModel):
    added: Optional[str] = Field(None, examples=['{}'])
    aff_added: Optional[str] = None
    aff_id: Optional[str] = None
    aff_payout_type: Optional[str] = None
    avatar: Optional[str] = None
    city: Optional[str] = None
    comment: Optional[str] = Field(None, examples=['Added Via KKids API'])
    country: Optional[str] = None
    disable_lock_until: Optional[str] = None
    email: Optional[str] = Field(None, examples=['jane@doe.com'])
    i_agree: Optional[str] = Field(None, examples=['0'])
    is_affiliate: Optional[str] = None
    is_locked: Optional[str] = Field(None, examples=['0'])
    lang: Optional[str] = None
    last_login: Optional[str] = None
    login: Optional[str] = Field(None, examples=['janedoe'])
    name_f: Optional[str] = Field(None, examples=['Jane'])
    name_l: Optional[str] = Field(None, examples=['Doe'])
    pass_: Optional[str] = Field(None, alias='pass')
    pass_dattm: Optional[str] = Field(None, examples=['{}'])
    phone: Optional[str] = None
    pin: Optional[str] = Field(None, examples=['0'])
    plain_password: Optional[str] = None
    remember_key: Optional[str] = None
    remote_addr: Optional[str] = Field(None, examples=['104.237.5.109'])
    require_consent: Optional[str] = None
    reseller_id: Optional[str] = None
    saved_form_id: Optional[str] = None
    state: Optional[str] = None
    status: Optional[str] = Field(None, examples=['0'])
    street: Optional[str] = None
    street2: Optional[str] = None
    subusers_parent_id: Optional[str] = Field(None, examples=['0'])
    tax_id: Optional[str] = None
    unsubscribed: Optional[str] = Field(None, examples=['0'])
    user_agent: Optional[str] = None
    user_id: Optional[int] = Field(None, examples=[1])
    zip: Optional[str] = None


class AllowanceAllowanceTransaction(BaseModel):
    amount: Optional[int] = Field(None, examples=[10])
    date: Optional[str] = Field(None, examples=['{}'])
    transactionDescription: Optional[str] = Field(
        None, examples=['Weekly Allowance for Chores']
    )
    transactionId: Optional[int] = Field(None, examples=[85])
    transactionType: Optional[str] = Field(None, examples=['Add'])
    userId: Optional[int] = Field(None, examples=[1])


class Chore(BaseModel):
    aiIcon: Optional[str] = Field(None, examples=['n'])
    altitude: Optional[int] = None
    blockDash: Optional[bool] = Field(None, examples=[False])
    choreDescription: Optional[str] = Field(
        None, examples=['Wash dishes and clean off counter']
    )
    choreName: Optional[str] = Field(None, examples=['Wash Dishes'])
    choreNumber: Optional[int] = Field(None, examples=[1])
    day: Optional[str] = Field(None, examples=['Monday'])
    extraAllowance: Optional[int] = Field(None, examples=[5])
    idChoreList: Optional[int] = Field(None, examples=[1])
    isCalendar: Optional[bool] = Field(None, examples=[False])
    kid: Optional[str] = Field(None, examples=['jane'])
    latitude: Optional[int] = None
    longitude: Optional[int] = None
    nfcTag: Optional[str] = Field(None, examples=['kkids//Chores?washdishestag'])
    notes: Optional[str] = None
    oneTime: Optional[bool] = Field(None, examples=[False])
    optional: Optional[bool] = Field(None, examples=[False])
    reassignable: Optional[bool] = Field(None, examples=[True])
    reassigned: Optional[bool] = Field(None, examples=[False])
    requireObjectDetection: Optional[str] = Field(None, examples=['bed'])
    startDate: Optional[str] = Field(None, examples=['{}'])
    status: Optional[str] = Field(None, examples=['todo'])
    stolen: Optional[bool] = Field(None, examples=[False])
    stolenBy: Optional[str] = None
    updated: Optional[str] = Field(None, examples=['{}'])
    updatedBy: Optional[str] = Field(None, examples=['janedoe'])


class Chorelist(BaseModel):
    chore: Optional[List[Chore]] = None
    success: Optional[int] = Field(None, examples=[1])


class InlineResponse201(BaseModel):
    app_key: str = Field(..., examples=['8765futybkunj98ho7gi6tybkuhj'])
    success: Optional[bool] = Field(None, examples=[True])


class InlineResponse2011(BaseModel):
    auth_key: Optional[str] = Field(None, examples=['8ou7jyubj878h7iunk'])
    success: Optional[bool] = Field(None, examples=[True])


class InlineResponse202(BaseModel):
    success: Optional[bool] = Field(None, examples=[True])


class InvalidateApiKey(BaseModel):
    message: Optional[str] = Field(None, examples=['API Key Set to Expire Immediately'])
    success: Optional[int] = Field(None, examples=[1])


class Nodata(BaseModel):
    error: Optional[str] = Field(None, examples=['No Data Found'])
    status: Optional[int] = Field(None, examples=[0])


class Success(BaseModel):
    message: Optional[str] = Field(None, examples=['success'])
    success: Optional[bool] = Field(None, examples=[True])


class User(BaseModel):
    email: Optional[str] = Field(None, examples=['jane@doe.com'])
    emoji: Optional[str] = Field(None, examples=['ðŸ¤—'])
    enableAllowance: Optional[bool] = Field(None, examples=[True])
    enableBehaviorChart: Optional[bool] = Field(None, examples=[False])
    enableChores: Optional[bool] = Field(None, examples=[True])
    enableNoAds: Optional[bool] = Field(None, examples=[False])
    enableObjectDetection: Optional[bool] = Field(None, examples=[False])
    enableTmdb: Optional[bool] = Field(None, examples=[True])
    firstName: Optional[str] = Field(None, examples=['Jane'])
    homeId: Optional[int] = Field(None, examples=[1])
    isActive: Optional[bool] = Field(None, examples=[True])
    isAdmin: Optional[bool] = Field(None, examples=[False])
    isBanned: Optional[bool] = Field(None, examples=[False])
    isChild: Optional[bool] = Field(None, examples=[True])
    isDisabled: Optional[bool] = Field(None, examples=[False])
    isLocked: Optional[bool] = Field(None, examples=[False])
    isMaster: Optional[bool] = Field(None, examples=[False])
    lastName: Optional[str] = Field(None, examples=['Doe'])
    masterId: Optional[int] = Field(None, examples=[1])
    pushAllowance: Optional[bool] = Field(None, examples=[True])
    pushAllowanceNew: Optional[bool] = Field(None, examples=[True])
    pushChores: Optional[bool] = Field(None, examples=[True])
    pushChoresNew: Optional[bool] = Field(None, examples=[True])
    pushChoresReminders: Optional[bool] = Field(None, examples=[True])
    tmdbKey: Optional[str] = Field(None, examples=['9a87huiufe94r8'])
    userId: Optional[int] = Field(None, examples=[10])
    username: Optional[str] = Field(None, examples=['janedoe'])
    weeklyAllowance: Optional[int] = Field(None, examples=[5])


class Userlist(BaseModel):
    success: Optional[bool] = Field(None, examples=[True])
    user: Optional[List[User]] = None


class Wish(BaseModel):
    description: Optional[str] = Field(None, examples=['Pokemon trading cards'])
    id: Optional[int] = Field(None, examples=[1])
    link: Optional[str] = Field(None, examples=['https://www.google.com'])
    master_id: Optional[int] = Field(None, examples=[1])
    priority: Optional[int] = Field(None, examples=[1])
    title: Optional[str] = Field(None, examples=['Pokemon Cards'])
    user_id: Optional[int] = Field(None, examples=[1])


class Wishlist(BaseModel):
    success: Optional[bool] = Field(None, examples=[True])
    wish: Optional[List[Wish]] = None


class TransactionType(Enum):
    Add = 'Add'
    Subtract = 'Subtract'


class Tool(Enum):
    register = 'register'
    subscribe = 'subscribe'
    unsubscribe = 'unsubscribe'
    send = 'send'


class Section(Enum):
    Chores = 'Chores'
    Chores_New = 'Chores-New'
    Chores_Reminders = 'Chores-Reminders'
    Allowance = 'Allowance'
    Allowance_New = 'Allowance-New'
    WishList = 'WishList'


class Priority(Enum):
    passive = 'passive'
    active = 'active'
    time_sensitive = 'time-sensitive'
    critical = 'critical'


class Day(Enum):
    Sunday = 'Sunday'
    Monday = 'Monday'
    Tuesday = 'Tuesday'
    Wednesday = 'Wednesday'
    Thursday = 'Thursday'
    Friday = 'Friday'
    Saturday = 'Saturday'
    Weekly = 'Weekly'


class Day2(Enum):
    Sunday = 'Sunday'
    Monday = 'Monday'
    Tuesday = 'Tuesday'
    Wednesday = 'Wednesday'
    Thursday = 'Thursday'
    Friday = 'Friday'
    Saturday = 'Saturday'
    Weekly = 'Weekly'
    Today = 'Today'


class WhereDay(Enum):
    Sunday = 'Sunday'
    Monday = 'Monday'
    Tuesday = 'Tuesday'
    Wednesday = 'Wednesday'
    Thursday = 'Thursday'
    Friday = 'Friday'
    Saturday = 'Saturday'
    Weekly = 'Weekly'
    Today = 'Today'


class Link(Enum):
    https___khome_kumpeapps_com_portal_wish_list_php = (
        'https://khome.kumpeapps.com/portal/wish-list.php'
    )
    https___khome_kumpeapps_com_portal_chores_today_php = (
        'https://khome.kumpeapps.com/portal/chores-today.php'
    )


class Scope(Enum):
    WishList = 'WishList'
    WishListAdmin = 'WishListAdmin'
    Chores = 'Chores'
    ChoresAdmin = 'ChoresAdmin'


class Scope2(Enum):
    WishList = 'WishList'
    WishListAdmin = 'WishListAdmin'
    Chores = 'Chores'
    ChoresAdmin = 'ChoresAdmin'


class Scope3(Enum):
    WishList = 'WishList'
    WishListAdmin = 'WishListAdmin'
    Chores = 'Chores'
    ChoresAdmin = 'ChoresAdmin'


class Scope4(Enum):
    WishList = 'WishList'
    WishListAdmin = 'WishListAdmin'
    Chores = 'Chores'
    ChoresAdmin = 'ChoresAdmin'


class Allowance(BaseModel):
    allowanceTransaction: Optional[List[AllowanceAllowanceTransaction]] = None
    balance: Optional[int] = None
    id: Optional[int] = Field(None, examples=[24])
    lastUpdated: Optional[str] = Field(None, examples=['{}'])
    success: Optional[int] = Field(None, examples=[1])


class Authentication(BaseModel):
    apiKey: Optional[str] = Field(None, examples=['67utyuvb7i6ugy9p843erwt3g'])
    success: Optional[int] = Field(None, examples=[1])
    user: Optional[User] = None
